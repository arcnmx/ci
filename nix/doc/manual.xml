<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      version="5.0"
      xml:id="book-ci-manual">
  <info>
    <title>CI/nix Manual</title>
  </info>
  <preface>
    <title>CI/nix</title>
    <para>
      <link xlink:href="https://github.com/arcnmx/ci">CI</link> is a declarative continuous
      integration and testing system built on top of Nix and the NixOS module system. Its aim is to
      be flexible in order to meet the many needs of the various technologies and cloud providers in
      use with CI today, while being simple and self-contained so that all actions can be performed
      on a local machine. Build results should be reproducible so if it works on your machine then
      it will work on the CI server as well!
    </para>
    <para>
      Some of the project's goals and features are...
    </para>
    <itemizedlist>
      <listitem><para>
        The same reproducibility guarantees provided by the Nix and NixOS ecosystem, offering consistent builds that will produce the same results whether they run on your laptop or in the cloud.
      </para></listitem>
      <listitem><para>
        Matrix builds that run locally as well as on remote CI servers.
      </para></listitem>
      <listitem><para>
        Integration with the Nix store to cache and avoid repeating unnecessary work.
      </para></listitem>
      <listitem><para>
        Included escape hatches for tests, commands, and deployments that require the network or other resources that would normally be restricted by using Nix.
      </para></listitem>
      <listitem><para>
        Integration with existing CI providers while being agnostic to the underlying service, allowing the same configuration to work with multiple providers while still providing dashboards and results that reflect your configuration.
      </para></listitem>
      <listitem><para>
        Ability to publish results and perform follow-up actions and notifications without being constrained to any particular provider's capabilities.
      </para></listitem>
    </itemizedlist>
    <para>
      (this is currently all very much WIP right now, but please do <link xlink:href="https://github.com/arcnmx/ci/issues">file issues</link> if you actually use it and have questions or concerns!)
    </para>
  </preface>
  <chapter xml:id="ch-setup">
    <title>Setup</title>
    <para>
      To start, it's covenient to have the <literal>ci</literal> channel available to nix on your
      system:
    </para>
    <screen>
      <prompt>$</prompt> <userinput>export NIX_PATH=$NIX_PATH:ci=https://github.com/arcnmx/ci/archive/master.tar.gz</userinput>
    </screen>
    <para>
      This allows the channel to be easily referred to while testing locally, like so:
    </para>
    <screen>
      <prompt>$</prompt> <userinput>nix run -f '&lt;ci&gt;' help</userinput>
      <prompt>$</prompt> <userinput>nix run -f '&lt;ci&gt;' --arg config '&lt;ci/examples/ci.nix&gt;' test</userinput>
      <computeroutput>✔️ hello, world ok</computeroutput>
    </screen>
    <para>
      You can also manage it with <literal>nix-channel</literal>, though due to a nix limitation you
      are still required to include the channel name in <literal>NIX_PATH</literal> in some way:
    </para>
    <screen>
      <prompt>$</prompt> <userinput>nix-channel --add https://github.com/arcnmx/ci/archive/master.tar.gz ci</userinput>
      <prompt>$</prompt> <userinput>nix-channel --update</userinput>
      <prompt>$</prompt> <userinput>export NIX_PATH=$NIX_PATH:ci=/xxx</userinput>
    </screen>
  </chapter>
  <chapter xml:id="ch-commands">
    <title>Commands</title>
    <para>
      Global and CI commands can be found with the list command:
    </para>
    <screen>
      <prompt>$</prompt> <userinput>nix run -f '&lt;ci&gt;' list</userinput>
      <computeroutput>list</computeroutput>
      <computeroutput>run.gh-actions-generate</computeroutput>
      <computeroutput>run.test.example</computeroutput>
      <computeroutput>test</computeroutput>
    </screen>
    <para>
      Commands under a job or stage sub-configuration can be accessed by name via
      <literal>ci.job.jobName.run</literal> and <literal>ci.stage.name.run</literal> respectively.
    </para>
  </chapter>
  <chapter xml:id="ch-examples">
    <title>Examples</title>
    <para>
      Documentation is a bit sparse right now, but a few examples are currently available:
    </para>
    <itemizedlist>
      <listitem><para>
        <link xlink:href="https://github.com/arcnmx/ci/blob/master/examples/ci.nix#blob-path"> Example</link> and <link xlink:href="https://github.com/arcnmx/ci/runs/251473028">associated dashboard</link>
      </para></listitem>
      <listitem><para>
        <link xlink:href="https://github.com/arcnmx/ci/tree/master/tests">CI Tests</link>
      </para></listitem>
      <listitem><para>
        <link xlink:href="https://github.com/arcnmx/nixexprs-rust/blob/master/ci.nix#blob-path">rust channel tests</link>
      </para></listitem>
    </itemizedlist>
  </chapter>
  <chapter xml:id="ch-configuration">
    <title>Configuration</title>
    <section xml:id="sec-configuration-options">
      <title>Options</title>
      <para>
        <xref linkend="ch-options"/> lists all the options available for customizing your CI
        process!
      </para>
    </section>
    <section xml:id="sec-configuration-env">
      <title>Environment</title>
      <para>
        <xref linkend="ch-env"/> documents the environment variables provided by and used for
        configuring the CI. It may be convenient to set some of these for a project in the relevant
        <literal>shell.nix</literal> or <literal>.direnv</literal> files.
      </para>
    </section>
  </chapter>
  <appendix xml:id="ch-options">
    <title>Configuration Options</title>
    <xi:include href="./nmd-result/ci-options.xml" />
  </appendix>
  <appendix xml:id="ch-env">
    <title>Environment Variables</title>
    <section xml:id="sec-env-input">
      <title>Input</title>
      <para>
        The following environment variables can be used to tweak CI behaviour and configuration. Some
        of these may be ignored when <literal>config.environment.impure = false</literal>.
      </para>
      <itemizedlist>
        <listitem><para>
          <literal>CI_CONFIG</literal> points to your CI configuration, if not provided via <literal>--arg config</literal>.
        </para></listitem>
        <listitem><para>
          <literal>CI_CONFIG_ROOT</literal> points to your project root. This is used to resolve relative <literal>CI_CONFIG</literal> paths when generating cloud service configurations.
        </para></listitem>
        <listitem><para>
          <literal>CI_PLATFORM</literal> indicates what environment the tests are currently running under. This should generally only be set when configuring a CI server, but the special <literal>impure</literal> value can be used to instruct the tests to use nixpkgs from your <literal>NIX_PATH</literal> environment. This may be useful when testing local changes or to avoid nix store bloat from using pinned channels.
          <!-- TODO: list currently supported values: impure, gh-actions, azure-pipelines -->
        </para></listitem>
        <listitem><para>
          TBD: <literal>CI_ALLOW_ROOT</literal>, <literal>CI_CLOSE_STDIN</literal>
        </para></listitem>
      </itemizedlist>
    </section>
    <section xml:id="sec-env-output">
      <title>Output</title>
      <para>
        Environment variables are also used to relay information about the build environment to the configuration, and can be accessed via <literal>builtins.getEnv</literal>.
      </para>
      <itemizedlist>
        <listitem><para>
          <literal>CI_ROOT</literal> points to the path of the CI channel currently being used for evaluation.
        </para></listitem>
        <listitem><para>
          TBD: <literal>CI_ENV</literal>, <literal>CI_PATH</literal>
        </para></listitem>
      </itemizedlist>
    </section>
  </appendix>
</book>
